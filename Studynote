学习 Python 笔记

2018.10.08

关于程序函数不能正常显示 print 的内容问题：





运行结果如下：





问题原因：不熟悉 Python 代码缩进功能，Python 代码的缩进就是代表是否在该程序块中。



也就是说 Python 执行的时候是按照行 2 的 func 函数执行，行 6-8 的这段代码其实就是 func 函数的一部分，运行的时候，就是默认有该函数自己调用自己，并不输出到终端。

调整行 6-8后的代码，把代码调整与 def 对齐，表示代码是不在 func 函数内。





问题：关键参数、可变参数是何时使用？



注意：None 在 Python 中代表的是虚无。



2018.10.09

关于 Python 无法识别 sys 内置函数





测试中 undo 代码的时候，重新把 for i in sys.argv 后面的 : 重新填写上后测试过去







用于我输入代码的时候需要使用注释中文，所以这个问题很容易犯错。我计划调整一下输入法，设置为美式键盘和搜狗输入，避免因误操作使用 shift 切换到中文。

  



关于模块的 name   不太懂，为啥这个模块的用途



Packages “包”的概念如何用？只是懂了，包是模块和全量的关系。



2018.10.17

关于 init 方法敲代码后出现 say() takes no arguments 的信息，搜索 stackoverflow 反馈的信息如下：

    class MyClass:
    	def say():
    		print("hello")
    mc = MyClass()
    mc.say()

[stackoverflow 回复]: 问题是 methods 在 class 希望 the first argument是 self。在 Python 中即使 methods 中不使用，self 作为参数是必须使用的。

    class MyClass:
    	def say(self):
    		print("hello")
    		
    mc = MyClass()
    mc.say()

    class MyClass:
    	@staticmethod
    	def say():
    		print("hello")
    		
    mc = MyClass()
    mc.say()

 



2018.10.18

ASCII编码 0~9 码值是48-57，A~Z 的码值是65~90，a~z 的码值是97~122

对于 Python 的 re 规则库使用命令如下：

    import re
    
    re.search("[0-z]","2") !=None
    
    re.search("^[0-z]$","2") !=None
    
    re.search(r"^[0\-9]","-") != None
    
     "^[0-9]$"  等价于 "^[0\\-9]$"    #表示包含0，-，9 这三个字符，由于“-” 这个需要转移，所以要加\
        
     re.search(r"^[012]345]$","2345") != None #输出结果为 False，其中注意匹配 345] 作为字符组来匹配
    
     re.search(r"^[^0-9][0-9]$","8") != None #输出结果为 False，其中注意匹配 ^是匹配一个没有列出的字符，所以必须匹配字符
        
     
    在正则表达式中 ^ 和 $ 是正则表达式中的特殊字符，并不匹配任何字符，表示 “定位到字符串的起始位置” 和 “定位到字符串的结束位置”
        
      

  

" ，其实就是表示包含 0 ，-，9 这三个字符





2018.11.12

print 函数可以打印整数，比如 print(2) 也可以 print('2')

    print(2)
    print('2')

但是对于使用 print 里面要用 + 来把字符拼接，那么不能直接用整数来拼接

    for i in d:
        print( i + '的面积为' + d + '平方米')

图上这样是不可以。必须使用 str 函数，如下：

    d = {'弘福寺':1001,'大兴善寺':900,'青龙寺':700,'卧龙寺':500}
    
    
    for i in d:
        print( i + '的面积为' + str(d[i]) + '平方米')
    
    
    print('1')





2018.11.30



    file1 = open('e:/nametest.txt','r',encoding='utf-8')
    filecontent = file1.read()
    print(filecontent)
    file1.close()

    file1 = open('e:/nametest.txt','r',encoding='gbk')
    filecontent = file1.read()
    print(filecontent)
    file1.close()



第一种写法会报错：

原因是 win 系统默认的 gbk 作为系统内部编码，在命令行条使用 console 调试时使用的是内部编码



    file1 = open('e:/nametest.txt','r',encoding='gbk')
    filecontent = file1.read()
    print(filecontent)
    file1.close()
    
    file1 = open('e:/nametest.txt','a',encoding='gbk')
    file1.write('2\n')
    file1.write('赵敏\n')
    file1.close()
    
    file1 = open('e:/nametest.txt','r',encoding='gbk')
    filecontent = file1.read()
    print(filecontent)
    file1.close()

如果写或者append 内容时，没有 close 。那么 print 的内容还是原来的，不包括 w 和 a 的内容。
